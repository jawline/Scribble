TODO: GC CHECK STACK
TODO: GC CHECK HEAP
Garbage collector running
Garbage collector done deleting 0 elements
VM Move 6 to 3 0 to 0
VM Move 5 to 5 0 to 0
Jump direct relative to 2
Calling function test.y#0
Calling function test.r#0
Calling function test.j#0
VM Return at instruction 8
Added registers 3 and 4. Placing result in 3
VM Return at instruction 48
Added registers 3 and 4. Placing result in 3
VM Return at instruction 48
Calling function sys.IntToString
Calling function sys.NativeWriteString
VM Move 3 to 255 0 to 0
Calling function sys.NativeWriteString
VM Move 3 to 255 0 to 0
Added registers 6 and 3. Placing result in 6
Jump direct relative to -34
VM Move 6 to 3 0 to 0
VM Move 5 to 5 0 to 0
Jump direct relative to 2
Calling function test.y#0
Calling function test.r#0
Calling function test.j#0
VM Return at instruction 8
Added registers 3 and 4. Placing result in 3
VM Return at instruction 48
Added registers 3 and 4. Placing result in 3
VM Return at instruction 48
Calling function sys.IntToString
Calling function sys.NativeWriteString
VM Move 3 to 255 0 to 0
Calling function sys.NativeWriteString
VM Move 3 to 255 0 to 0
Added registers 6 and 3. Placing result in 6
Jump direct relative to -34
VM Move 6 to 3 0 to 0
VM Move 5 to 5 0 to 0
Jump direct relative to 2
Calling function test.y#0
Calling function test.r#0
Calling function test.j#0
VM Return at instruction 8
Added registers 3 and 4. Placing result in 3
VM Return at instruction 48
Added registers 3 and 4. Placing result in 3
VM Return at instruction 48
Calling function sys.IntToString
Calling function sys.NativeWriteString
VM Move 3 to 255 0 to 0
Calling function sys.NativeWriteString
VM Move 3 to 255 0 to 0
Added registers 6 and 3. Placing result in 6
Jump direct relative to -34
VM Move 6 to 3 0 to 0
VM Move 5 to 5 0 to 0
Jump direct relative to 2
Calling function test.y#0
Calling function test.r#0
Calling function test.j#0
VM Return at instruction 8
Added registers 3 and 4. Placing result in 3
VM Return at instruction 48
Added registers 3 and 4. Placing result in 3
VM Return at instruction 48
Calling function sys.IntToString
Calling function sys.NativeWriteString
VM Move 3 to 255 0 to 0
Calling function sys.NativeWriteString
VM Move 3 to 255 0 to 0
Added registers 6 and 3. Placing result in 6
Jump direct relative to -34
VM Move 6 to 3 0 to 0
VM Move 5 to 5 0 to 0
Jump direct relative to 2
Calling function test.y#0
Calling function test.r#0
Calling function test.j#0
VM Return at instruction 8
Added registers 3 and 4. Placing result in 3
VM Return at instruction 48
Added registers 3 and 4. Placing result in 3
VM Return at instruction 48
Calling function sys.IntToString
Calling function sys.NativeWriteString
VM Move 3 to 255 0 to 0
Calling function sys.NativeWriteString
VM Move 3 to 255 0 to 0
Added registers 6 and 3. Placing result in 6
Jump direct relative to -34
VM Move 6 to 3 0 to 0
VM Move 5 to 5 0 to 0
Jump direct relative to 2
Calling function test.y#0
Calling function test.r#0
Calling function test.j#0
VM Return at instruction 8
Added registers 3 and 4. Placing result in 3
VM Return at instruction 48
Added registers 3 and 4. Placing result in 3
VM Return at instruction 48
Calling function sys.IntToString
Calling function sys.NativeWriteString
VM Move 3 to 255 0 to 0
Calling function sys.NativeWriteString
VM Move 3 to 255 0 to 0
Added registers 6 and 3. Placing result in 6
Jump direct relative to -34
VM Move 6 to 3 0 to 0
VM Move 5 to 5 0 to 0
Jump direct relative to 2
Calling function test.y#0
Calling function test.r#0
Calling function test.j#0
VM Return at instruction 8
Added registers 3 and 4. Placing result in 3
VM Return at instruction 48
Added registers 3 and 4. Placing result in 3
VM Return at instruction 48
Calling function sys.IntToString
Calling function sys.NativeWriteString
VM Move 3 to 255 0 to 0
Calling function sys.NativeWriteString
VM Move 3 to 255 0 to 0
Added registers 6 and 3. Placing result in 6
Jump direct relative to -34
VM Move 6 to 3 0 to 0
VM Move 5 to 5 0 to 0
Jump direct relative to 2
Calling function test.y#0
Calling function test.r#0
Calling function test.j#0
VM Return at instruction 8
Added registers 3 and 4. Placing result in 3
VM Return at instruction 48
Added registers 3 and 4. Placing result in 3
VM Return at instruction 48
Calling function sys.IntToString
Calling function sys.NativeWriteString
VM Move 3 to 255 0 to 0
Calling function sys.NativeWriteString
VM Move 3 to 255 0 to 0
Added registers 6 and 3. Placing result in 6
Jump direct relative to -34
VM Move 6 to 3 0 to 0
VM Move 5 to 5 0 to 0
Jump direct relative to 2
Calling function test.y#0
Calling function test.r#0
Calling function test.j#0
VM Return at instruction 8
Added registers 3 and 4. Placing result in 3
VM Return at instruction 48
Added registers 3 and 4. Placing result in 3
VM Return at instruction 48
Calling function sys.IntToString
Calling function sys.NativeWriteString
VM Move 3 to 255 0 to 0
Calling function sys.NativeWriteString
VM Move 3 to 255 0 to 0
Added registers 6 and 3. Placing result in 6
Jump direct relative to -34
VM Move 6 to 3 0 to 0
VM Move 5 to 5 0 to 0
Jump direct relative to 2
Calling function test.y#0
Calling function test.r#0
Calling function test.j#0
VM Return at instruction 8
Added registers 3 and 4. Placing result in 3
VM Return at instruction 48
Added registers 3 and 4. Placing result in 3
VM Return at instruction 48
Calling function sys.IntToString
Calling function sys.NativeWriteString
VM Move 3 to 255 0 to 0
Calling function sys.NativeWriteString
VM Move 3 to 255 0 to 0
Added registers 6 and 3. Placing result in 6
Jump direct relative to -34
VM Move 6 to 3 0 to 0
VM Move 5 to 5 0 to 0
Jump direct relative to 26
--VM STATE--

#0:288 #1:0 #2:0
#3:1 #4:10 #5:0
#6:10 #7:0 #8:0
#9:0 #10:0 #11:0
#12:0 #13:0 #14:0
#15:0 #16:0 #17:0
#18:0 #19:0 #20:0
#21:0 #22:0 #23:0
#24:0 #25:0 #26:0
#27:0 #28:0 #29:0
#30:0 #31:0 
--HEAP DATA--
Num heap entries: 20
Entry: 1 type string string value: 130
Entry: 2 type string string value: 

Entry: 3 type string string value: 130
Entry: 4 type string string value: 

Entry: 5 type string string value: 130
Entry: 6 type string string value: 

Entry: 7 type string string value: 130
Entry: 8 type string string value: 

Entry: 9 type string string value: 130
Entry: 10 type string string value: 

Entry: 11 type string string value: 130
Entry: 12 type string string value: 

Entry: 13 type string string value: 130
Entry: 14 type string string value: 

Entry: 15 type string string value: 130
Entry: 16 type string string value: 

Entry: 17 type string string value: 130
Entry: 18 type string string value: 

Entry: 19 type string string value: 130
Entry: 20 type string string value: 

--END HEAP--

--VM STATE END--

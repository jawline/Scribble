// Brief Description - Recursive factorial function
//
// Variable - n, the value you want the factorial of
//
// Return Description - The factorial of n 
//
// Extended Description - This function recursively generates
// the factorial of the given argument n

func fact(var factN : int) : int {

	if (factN < 1) {
		write("Only works on values > 1")
		return 0
	}

	if (factN = 1) {
		return 1
	}

	return factN * fact(factN-1)
}

// Recursive fibs implementation
//
// n, The desired position in the sequence (Between 0 and infinity)
//
// The resulting value in the Fibonacci sequence
//
// This recursive fibs implementation recursively breaks down the
// fibonacci problem into a very simple algorithm. It is however considerably less
// memory efficient than its iterative counterparts

func fibs(var fibsN : int) : int {
	
	if (fibsN < 0) {
		write("N Should be a positive value\n")
		return 0
	}

	if (fibsN = 0) {
		return 0
	}
	
	if (fibsN = 1) {
		return 1
	}
	
	return fibs(fibsN - 1) + fibs(fibsN - 2)
}

// The main function in this test situation
//
// No Arguments
//
// No Return
//
// Runs some simple tests

func main() : void {
	var fibsTo : int := 8
	var factTo : int := 6
	
	write("Calculating " + string(fibsTo) + " of fibs\n")
	write(string(fibs(fibsTo)) + "\n")
	
	write("Looping fibs between 0 and 10\n")
	
	for var i : int := 0; i < 10; i := i + 1 {
		write(string(fibs(i)) + " ")
	}
	
	write("\n")

	write("Writing the factorial of " + string(factTo) + "\n")
	write(string(fact(factTo)) + "\n")
	
	write("For looping factorial between 1 and 10\n")
	
	for var x : int := 1; x < 10; x := x + 1 {
		write(string(fact(x)) + " ")
	}
	
	write("\n")
}
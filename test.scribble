import("sys")
import("fibs")
import("fact")
import("arrays")
import("random")
import("variables")
import("functions")

func partition(n : array(int), i : int, j : int) : int {
	var tmp : int
	var pivot := n[(i+j)/2]
	
	sys.Write("Picked pivot " + sys.String(pivot) + "\n")
	
	while (i <= j) {

		sys.Write("I: " + sys.String(i) + " J: " + sys.String(j) + "\n")

		while (n[i] < pivot) {
			i++
		}

		while (n[j] > pivot) {
			j--
		}

		if (i <= j) {
			sys.Write("Swapping " + sys.String(n[i]) + " for " + sys.String(n[j]) + "\n")
			tmp := n[i]
			n[i] := n[j]
			n[j] := tmp
			i++
			j--
		}
		
	}
	
	for var iter := 0; iter < len(n); iter++ {
	 sys.Write(sys.String(n[iter]) + " ")
	}
	sys.Write("\n")
	
	return i
}

func quicksort(n : array(int), l : int, r : int) : array(int) {
	
	var index := partition(n, l, r)
	
	if l < index-1 {
		quicksort(n, l, index-1)
	}
	
	if index < len(n)-1 {
		quicksort(n, index, r)
	}
}

// The main function in this test situation
//
// No Arguments
//
// No Return
//
// Runs some simple tests

func main() : void {

	var j := [10]int
	j[3] := 4
	j[4] := 10
	j[2] := 8
	j[1] := 2
	j[0] := 9
	j[5] := 100
	j[6] := 32
	j[7] := 4
	
	for var k := 0; k < len(j); k++ {
		sys.Write(sys.String(j[k]) + " ")
	}
	
	sys.Write("\n")
	
	quicksort(j, 0, 9)
	
	for k := 0; k < len(j); k++ {
		sys.Write(sys.String(j[k]) + " ")
	}
	
	sys.Write("-- Scribble test program --\n")
	
	var i := 2
	
	if ((i > 0) & (i < 30)) {
		sys.Write("Hi\n")
	}

	if (variables.Test() = false) {
		sys.Write("Variables test failed.\n")
	}

	if (arrays.Test() = false) {
		sys.Write("Arrays test failed.\n")
	}
	
	if (functions.Test() = false) {
		sys.Write("Functions test failed.\n")
	}

	if (random.Test() = false) {
		sys.Write("Random test failed.\n")
	}
	
	if (fibs.Test() = false) {
		sys.Write("Fibonacci test failed.\n")
	}
	
	if (fact.Test() = false) {
		sys.Write("Factorial test failed.\n")
	}

	sys.Write("-- End of scribble test program --\n")
}

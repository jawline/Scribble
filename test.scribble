// Brief Description - Recursive factorial function
//
// Variable - n, the value you want the factorial of
//
// Return Description - The factorial of n 
//
// Extended Description - This function recursively generates
// the factorial of the given argument n

func fact(var n : int) : int {

	if (n < 1) {
		Write("Only works on values > 1")
		return 0
	}

	if (n = 1) {
		return 1
	}

	return n*fact(n-1)
}

// Loop until a six is generated at random
//
// No Arguments
//
// No Return
//
// This function continuously generates random numbers between 1 and 
// 6 using the RandomInt function until a six is found at which point
// it prints the number of iterations to hit a six and returns

func snake() : void {

	Write("Generating random numbers until we get six\n")
	
	var temp : int := 0
	var iter : int := 0
	
	while (temp != 6) {
		temp := RandomInt(5)
		temp := temp+1
		iter := iter + 1
	}

	Write(String(iter) + " attempts til " + String(temp)+ "\n")	
}

// Recursive fibs implementation
//
// n, The desired position in the sequence (Between 0 and infinity)
//
// The resulting value in the Fibonacci sequence
//
// This recursive fibs implementation recursively breaks down the
// fibonacci problem into a very simple algorithm. It is however considerably less
// memory efficient than its iterative counterparts

func fibs(var n : int) : int {
	
	if (n < 0) {
		Write("N Should be a positive value\n")
		return 0
	}

	if (n = 0) {
		return 0
	}
	
	if (n = 1) {
		return 1
	}
	
	return fibs(n - 1) + fibs(n - 2)
}

// The main function in this test situation
//
// No Arguments
//
// No Return
//
// Runs some simple tests

func main() : void {

	var fibsTo : int := 8
	var factTo : int := 6
	
	Write("Calculating " + String(fibsTo) + " of fibs\n")
	Write(String(fibs(fibsTo)) + "\n")
	
	Write("Looping fibs between 0 and 10\n")
	
	for var i : int := 0; i < 10; i := i + 1 {
		Write(String(fibs(i)) + " ")
	}
	
	Write("\n")

	Write("Writing the factorial of " + String(factTo) + "\n")
	Write(String(fact(factTo)) + "\n")
	
	Write("For looping factorial between 1 and 10\n")
	
	for var x : int := 1; x < 10; x := x + 1 {
		Write(String(fact(x)) + " ")
	}
	
	Write("\n")
	
	snake()
}
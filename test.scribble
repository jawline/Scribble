import("sys")
import("fibs")
import("fact")

// Loop until a six is generated at random
//
// No Arguments
//
// No Return
//
// This function continuously generates random numbers between 1 and 
// 6 using the RandomInt function until a six is found at which point
// it prints the number of iterations to hit a six and returns

func snake() : int {
	
	var temp : int := 0
	var iter : int := 0
	
	while (temp != 6) {
		temp := sys.RandomInt(5)
		temp := temp + 1
		iter := iter + 1
	}

	return iter
}

func snakeR(var i : int) : int {
}

func snakeR(var i : bool) : int {
}

// Empty function to ensure language doesn't choke when there are no returns
//
// No Arguments
//
// Return template int
//
// This is the test case to make sure the language could handle functions
// that did not explicitely return.

func emptyReturn() : int {
}

// Infinate loop test
//
// No Arguments
//
// No Returns
//
// Infinate loop used to try and spot memory leaks in statements

func infinateLoop() : void {

	while 1 > 0 {
		snake()
	}

}

// The main function in this test situation
//
// No Arguments
//
// No Return
//
// Runs some simple tests

func main() : void {

	sys.Write("-- Scribble test program --\n")
	
	var jrDog : bool := false
	
	while jrDog = false {
		sys.Write("Hello world\n")
		jrDog := true
	}
	
	sys.Write("J: ")
	
	for var j : int := 10; j > 0; j-- {
		sys.Write(sys.String(j) + " ")
	}
	
	sys.Write(sys.String(j--))
	
	sys.Write("\n")

	var cookies : int := 2
	cookies := cookies * 3
	
	sys.Write("So many cookies: " + sys.String(cookies) + "\n")

	for var i : int := 0; i < 10; i++ {
		sys.Write( sys.String ( fibs.Fibs(i) ) + " ")
	}
	
	sys.Write("\n")
	
	for i := 0; i < 10; i++ {
		sys.Write( sys.String(fact.Fact(i)) + " ")
	}
	
	sys.Write("\n")
	
	sys.Write( sys.String(snake()) + " attempts till a six was rolled\n")
	
	sys.Write( "Calling a function that does not return: " + sys.String(emptyReturn()) + "\n")
	
	sys.Write("-- End of scribble test program --\n")
}
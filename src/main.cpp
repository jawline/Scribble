#include <VirtualMachine/VirtualMachine.hpp>
#include <Statement/Statement.hpp>
#include <Parser/Parser.hpp>
#include <version_info.hpp>

void printHelp(char const* exeName) {
	printf("-- %s Usage --\n", exeName);
	printf("compile Input Output\n");
	printf("run File\n");
	printf("--------------\n");
}

int main(int argc, char** argv) {

	printf("Scribble %i.%i.%i\n", VERSION_MAJOR, VERSION_MINOR, VERSION_REVISION);

	if (argc < 2) {
		printHelp(argv[0]);
		return -1;
	}

	if (strcmp(argv[1], "compile") == 0) {

		if (argc != 4) {
			printHelp(argv[0]);
			return -1;
		}

		std::string resultAssembly = Parser::generateAssembly("var A;var B;var C;A = 32;B=64;C=A+B;");

		printf("%s\n", resultAssembly.c_str());

/**
		// open a file handle to a particular file:
		FILE *myfile = fopen("test.scribble", "r");

		// make sure it's valid:
		if (!myfile) {
			printf("unable to open input\n");
			return -1;
		}

		// set lex to read from it instead of defaulting to STDIN:
		yyin = myfile;
	
		// lex through the input:
		yyparse();

		std::string programSource = "";
		std::vector<Statement*> stm = *Statements;
		for (int i = 0; i < Statements->size(); ++i) {

			programSource += Statements->at(i)->GenerateBytecode();

			if (i < Statements->size() - 1) {
				programSource += "\n";
			}

		}

		std::string va = "";
		std::map<std::string, int>::iterator i;
		for (i = Variables.begin(); i != Variables.end(); ++i) {
			std::stringstream j;
			j << ";Variable ";
			j << i->first;
			j << " ";
			j << i->second;
			j << "\n";
			va += j.str();
		}

		//printf("--VARIABLES--\n%s--END-VARIABLES--\n--OUTPUT GENERATED BYTECODE--\n%s\n--END GENERATED BYTECODE--\n", va.c_str(), programSource.c_str());
		*/

		FILE* fout = fopen(argv[3], "w");
		fwrite(resultAssembly.c_str(), 1, resultAssembly.length(), fout);
		fclose(fout);

		printf("Scribbled %s->%s\n", argv[2], argv[3]);

	} else if (strcmp(argv[1], "run") == 0) {

		if (argc != 3) {
			printHelp(argv[0]);
			return -1;
		}

		printf("Error: Run unimplemented %s\n", argv[2]);
		return -1;
	}
}
